/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.gfijalkowski.pba_lab_4.users.api.controller;

import org.springframework.format.annotation.DateTimeFormat;
import org.gfijalkowski.pba_lab_4.users.api.model.Error;
import java.time.OffsetDateTime;
import org.gfijalkowski.pba_lab_4.users.api.model.User;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-29T21:13:27.795420100+01:00[Europe/Warsaw]")
@Validated
@Tag(name = "users", description = "the users API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /users : Create a new user
     * Creates a new user with the given data.
     *
     * @param xRequestId The ID of the request (required)
     * @param xRequestDate Date and time of the request execution (required)
     * @param user  (required)
     * @return User created successfully (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "createUser",
        summary = "Create a new user",
        description = "Creates a new user with the given data.",
        responses = {
            @ApiResponse(responseCode = "201", description = "User created successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> createUser(
        @NotNull @Parameter(name = "X-Request-Id", description = "The ID of the request", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Request-Id", required = true) String xRequestId,
        @NotNull @Parameter(name = "X-Request-Date", description = "Date and time of the request execution", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Request-Date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xRequestDate,
        @Parameter(name = "User", description = "", required = true) @Valid @RequestBody User user
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /users/{userId} : Delete a specific user
     * Deletes a user by their ID.
     *
     * @param userId The ID of the user (required)
     * @param xRequestId The ID of the request (required)
     * @param xRequestDate Date and time of the request execution (required)
     * @return User deleted successfully (status code 204)
     *         or User not found (status code 404)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Delete a specific user",
        description = "Deletes a user by their ID.",
        responses = {
            @ApiResponse(responseCode = "204", description = "User deleted successfully"),
            @ApiResponse(responseCode = "404", description = "User not found"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "BasicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{userId}"
    )
    default ResponseEntity<Void> deleteUser(
        @Parameter(name = "userId", description = "The ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId,
        @NotNull @Parameter(name = "X-Request-Id", description = "The ID of the request", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Request-Id", required = true) String xRequestId,
        @NotNull @Parameter(name = "X-Request-Date", description = "Date and time of the request execution", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Request-Date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xRequestDate
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{userId} : Retrieve a specific user
     * Returns a user by their ID.
     *
     * @param userId The ID of the user (required)
     * @param xRequestId The ID of the request (required)
     * @param xRequestDate Date and time of the request execution (required)
     * @return User found (status code 200)
     *         or User not found (status code 404)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getUser",
        summary = "Retrieve a specific user",
        description = "Returns a user by their ID.",
        responses = {
            @ApiResponse(responseCode = "200", description = "User found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}",
        produces = { "application/json" }
    )
    default ResponseEntity<User> getUser(
        @Parameter(name = "userId", description = "The ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId,
        @NotNull @Parameter(name = "X-Request-Id", description = "The ID of the request", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Request-Id", required = true) String xRequestId,
        @NotNull @Parameter(name = "X-Request-Date", description = "Date and time of the request execution", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Request-Date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xRequestDate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"John\", \"lastName\" : \"Lennon\", \"citizenship\" : \"PL\", \"pesel\" : \"12345678901\", \"age\" : 30, \"email\" : \"John.Lennon@example.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users : Retrieve a list of users
     * Returns a list of all users in the system.
     *
     * @param xRequestId The ID of the request (required)
     * @param xRequestDate Date and time of the request execution (required)
     * @return A list of users (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getUsers",
        summary = "Retrieve a list of users",
        description = "Returns a list of all users in the system.",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of users", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "BasicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    default ResponseEntity<List<User>> getUsers(
        @NotNull @Parameter(name = "X-Request-Id", description = "The ID of the request", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Request-Id", required = true) String xRequestId,
        @NotNull @Parameter(name = "X-Request-Date", description = "Date and time of the request execution", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Request-Date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xRequestDate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"firstName\" : \"John\", \"lastName\" : \"Lennon\", \"citizenship\" : \"PL\", \"pesel\" : \"12345678901\", \"age\" : 30, \"email\" : \"John.Lennon@example.com\" }, { \"firstName\" : \"John\", \"lastName\" : \"Lennon\", \"citizenship\" : \"PL\", \"pesel\" : \"12345678901\", \"age\" : 30, \"email\" : \"John.Lennon@example.com\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/{userId} : Update a specific user
     * Updates the details of an existing user.
     *
     * @param userId The ID of the user (required)
     * @param xRequestId The ID of the request (required)
     * @param xRequestDate Date and time of the request execution (required)
     * @param user  (required)
     * @return User updated successfully (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or User not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "updateUser",
        summary = "Update a specific user",
        description = "Updates the details of an existing user.",
        responses = {
            @ApiResponse(responseCode = "200", description = "User updated successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "404", description = "User not found"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{userId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateUser(
        @Parameter(name = "userId", description = "The ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId,
        @NotNull @Parameter(name = "X-Request-Id", description = "The ID of the request", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Request-Id", required = true) String xRequestId,
        @NotNull @Parameter(name = "X-Request-Date", description = "Date and time of the request execution", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Request-Date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xRequestDate,
        @Parameter(name = "User", description = "", required = true) @Valid @RequestBody User user
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
